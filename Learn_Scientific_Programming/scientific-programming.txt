## Freecodecamp.org Scientific Programming with Python##

#01. Why Programming
itu adalah bagaimana cara kita, dan persfektif kita bahwa, kita dapat memanfaatkan programming sebagai alat untuk memecahkan persoalan kita. dan juga kita sebagai programmer, dapat menjadi bagian dari pada program itu sendiri, bagaimanapun kita membuat program agar bisa bermanfaat bagi orang lain. kita dapat menjadi jembatan antara komputer dan end user (Pengguna akhir).

#02. Hardware Architecture
adalah bagaimana program berjalan pada komputer, input program yang masuk akan di proses oleh CPU (atau central processing unit) dan program yang berjalan akan di simpan di RAM (atau Main Memory), untuk text, gambar dan file akan di simpan di Hard disk ( atau Secondary Memory), untuk komputer atau PC biasanya semua itu ada di mother board, dimana mother board memiliki slot untuk CPPU, RAM dan Hard disk.

#03. Python as a Language
pembuat python namanya guido van rossum, dan untuk penggemarnya namanya pythonista. pak guido ingin kita mempelajari bahasa pemrograman yang powerfull akan tetapi menyenangkan.

#04 Elements of python
** kamu nggak bisa menggunakan Reserved Words (Kata yang sudah python siapkan) sebagai nama variabel atau identifier
** python sequence, pemograman yang dijalankan berurutan
** python repeated, mengulang (looping) blok program menggunakan while dan for
** python conditional, percabangan pemrograman menggunakan if

#05. Variable, Exspression, and statement
** conditional branching di python sedikit berbeda dengan bahasa pemrograman lain, pada pengkondisian if tidak memakai tanda buka kurung, dan statement nya harus ada tab

#06. conditional structure
** jika di python untuk pengkondisian elseif itu syntaxnya adalah "elif". 
** menggunakan try dan except untuk mencegah kode berhenti ditengah jalan, ketika ada kode yang error. sehingga kode setelahnya tidak bisa terbaca dikarenakan error di baris sebelumnya. dengan menggunakan try dan except kita dapat mencegah program kita berhenti karena error.

#07 Python function
** gunakan keyword def() untuk mendefinisikan function di Python

#08 building our own function
** kita bisa menggunakan def() untuk membuat function, dan return value
   contoh : def makan():
                  return "makan ayam"
   ketika kita menggunakan perintah print(makan()), maka akan keluar output "makan ayam"
** pada fungsi yang kita definisikan, kita juga bisa menambahkan parameter.
   contoh : def makan(lauk):
                  return "makan " + lauk
            print(makan('soto'))
   dan ketika di jalankan akan mengeluarkan output sesuai dengan parameter yang di input
** kamu juga bisa menambahkan lebih dari satu parameter pada function

#09 looping and iteration
** looping atau perulangan didalam python menggunakan while, ada beberapa macam pengulangan. salah satunya adalah looping zero trip, mereka melakukan looping tetapi tidak mengulang apapun. berbanding dengan looping infinite yang akan mengulang terus menerus
** break loop adalah mengakhirkan loop yang sedang berlangsung apabila kondisi terpenuhi.
** loop while digunakan untuk hal hal yang tidak pasti atau indefinite loop

#10 Definite Loop (Loop pasti)
** menggunakan for dan biasanya me-looping array
** python bisa menggunakan is untuk menggantikan operator == dan is lebih kuat dibandingkan ==
** gunakan is hanya pada kasus True False dan None, jangan pernah gunakan is pada integer float dan string

11. String in Python
** untuk mengetahui panjang dari string kita bisa menggunakan built-in function len()

12. Intermediate String
** gunakan [a:b] untuk mencetak string tertentu, potongan string tertentu.
** a digunakan sebagai initiate, dan b digunakan sebagai stopper
** concatination dalam string mennggunakan +
** dalam python juga kita bisa menggunakan sting sebagai logical operator menggunakan keyword in
** untuk string kita bisa menggunakan library lower() function untuk membuat semua huruf besar menjadi kecil
** kita juga bisa melakukan search and replace dalam string, sebagai contoh kita dapat menimpa huruf atau kata dalam python menggunakan method replace()
** untuk menghapus whitespace kita bisa menggunakan strip() untuk menghapus whitespace di kedua sisi, lstrip() untuk sebelah kiri, rstrip() untuk disebelah kanan
** gunakan find() untuk menemukan posisi dari pada huruf yang kita cari

13. Reading Files
** new line use \n
** itu tetap dihitung satu karakter

14.  Files as a sequence
** mengulang string

15. Python list
** list dalam python sama dengan array dalam javascript
** List dalam python biasanya di tandai dengan []
** list dapat menyimpan apapun, bahkan list dapat menyimpan list
** untuk membuat list dapat menggunakan list construktor list()

16. add variable into list
** untuk menambahkan variabel ke dalam list dapat menggunakan append(), variable akan otomatis di tambahkan di akhir list
** untuk menambahkan list di awal atau di tengah dapat menggunakan insert(0,'nama variabel'), parameter pertama untuk index dalam list, parameter kedua untuk isinya
** To append elements from another list to the current list, use the extend() method.

17. List Comprehension
List comprehension bisa membuat syntax lebih pendek, dengan fungsi yang sama

18. Dictionarys
** dictionary selalu mempunyai key dan value
** itu bertindak seperti kita meletakkan barang di dalam tas, dan masing masing barang mempunyai identitasnya sendiri.
** key : value itu adalah struktur dari dictionary
** salah satu permasalahan menggunakan dictionary adalah kita tidak tahu key apa saja yang ada di dalam  dictionary, untuk itu kita dapat menggunakan perulangan atau pengkondisian statement. contohnya : if name in jumlah_akhir : x = print(jumlah_akhir) else: x = 0
** atau kita dapat menggunakan fungsi jumlah_akhir.get(name,0)

19. Tuple
** tuples sama dengan list, mereka mempunyai index, akan tetapi tuples itu immutable (atau tidak bisa di ubah nilainya)

20. RegEx
** RegEx Patterns
Tentu! Berikut terjemahan dari teks di atas:

**Pola Reguler (Regex)**:
Pola Reguler (Regex) adalah urutan karakter yang digunakan untuk mendefinisikan pola pencarian. Mereka memberikan cara yang kuat dan fleksibel untuk mencocokkan, mencari, dan memanipulasi string berdasarkan aturan dan pola tertentu.

Berikut beberapa simbol dan metakarakter yang umum digunakan dalam pola Regex:

**Karakter Literal**:
   Setiap karakter non-spesial dalam pola Regex akan cocok dengan karakter itu sendiri dalam teks input.

   Contoh: `python` cocok dengan kata "python" dalam teks input.

**Metakarakter**:
   Metakarakter adalah karakter khusus dengan arti yang telah ditentukan dalam pola Regex. Untuk menggunakan mereka sebagai karakter literal, Anda perlu menambahkan karakter escape (\) sebelumnya.

   Metakarakter umum:
   - `.`: Cocok dengan semua karakter kecuali newline.
   - `^`: Cocok dengan awal string.
   - `$`: Cocok dengan akhir string.
   - `*`: Cocok dengan nol atau lebih kemunculan karakter sebelumnya.
   - `+`: Cocok dengan satu atau lebih kemunculan karakter sebelumnya.
   - `?`: Cocok dengan nol atau satu kemunculan karakter sebelumnya.
   - `[]`: Cocok dengan salah satu karakter di dalam tanda kurung siku.
   - `|`: Berfungsi sebagai operator OR untuk mencocokkan salah satu ekspresi di sebelah kiri atau kanan.
   - `()`: Mengelompokkan karakter bersama.

**Kuantifikasi**:
   Kuantifikasi menentukan jumlah kemunculan karakter atau kelompok sebelumnya yang cocok.

   Kuantifikasi umum:
   - `*`: Cocok dengan nol atau lebih kemunculan.
   - `+`: Cocok dengan satu atau lebih kemunculan.
   - `?`: Cocok dengan nol atau satu kemunculan.
   - `{n}`: Cocok dengan tepat `n` kemunculan.
   - `{n,}`: Cocok dengan `n` atau lebih kemunculan.
   - `{n, m}`: Cocok dengan antara `n` dan `m` kemunculan.

**Kelas Karakter**:
   Kelas karakter memungkinkan Anda mencocokkan kelompok karakter tertentu.

   Kelas karakter umum:
   - `\d`: Cocok dengan angka apa pun (0-9).
   - `\D`: Cocok dengan karakter non-angka.
   - `\w`: Cocok dengan karakter kata (huruf, angka, garis bawah).
   - `\W`: Cocok dengan karakter non-kata.
   - `\s`: Cocok dengan karakter spasi (spasi, tab, newline).
   - `\S`: Cocok dengan karakter non-spasi.

**Penanda**:
   Penanda digunakan untuk mencocokkan posisi dalam string daripada karakter spesifik.

   Penanda umum:
   - `^`: Cocok dengan awal string.
   - `$`: Cocok dengan akhir string.
   - `\b`: Cocok dengan batas kata.

Ini adalah contoh sederhana penggunaan pola Regex di Python.

** 21 Networking with Python
   Dalam Python, "networking" mengacu pada proses pembuatan, pengelolaan, dan interaksi dengan jaringan komputer. Python menyediakan beberapa pustaka dan modul bawaan yang membuat tugas-tugas jaringan menjadi lebih mudah diakses.

   cd Salah satu pustaka utama untuk networking di Python adalah modul "socket". Modul socket memungkinkan Anda untuk bekerja dengan soket, yang merupakan titik akhir yang digunakan untuk komunikasi antara dua komputer melalui jaringan.

   Dalam Python, "socket" adalah sebuah pustaka bawaan yang menyediakan sekumpulan alat untuk bekerja dengan komunikasi jaringan. Pustaka socket memungkinkan Anda untuk membuat koneksi jaringan, mengirim dan menerima data melalui jaringan, serta membentuk berbagai jenis komunikasi jaringan, seperti interaksi klien-server.

   Dengan socket di Python, Anda dapat mengimplementasikan aplikasi klien dan server untuk berbagai protokol jaringan seperti TCP (Transmission Control Protocol) dan UDP (User Datagram Protocol). Berikut adalah gambaran singkat tentang konsep dan fungsi utama dari pustaka socket:

   Jenis Socket:

   SOCK_STREAM: Digunakan untuk koneksi TCP, yang menyediakan aliran data yang dapat diandalkan dan terurut.
   SOCK_DGRAM: Digunakan untuk koneksi UDP, yang menyediakan komunikasi cepat tanpa koneksi.
   Metode Dasar Socket:

   socket(): Membuat objek socket baru.
   bind(): Mengikat socket ke alamat IP dan port tertentu.
   listen(): Menempatkan socket ke mode mendengarkan, memungkinkannya menerima koneksi.
   accept(): Menerima koneksi masuk, menghasilkan objek socket baru untuk berkomunikasi dengan klien.
   connect(): Memulai koneksi ke server (untuk klien).
   send(): Mengirim data melalui socket.
   recv(): Menerima data dari socket.
   Alur Kerja Socket untuk Sisi Server:

   Membuat objek socket menggunakan socket.socket().
   Mengikat socket ke alamat dan port tertentu menggunakan bind().
   Menempatkan socket dalam mode mendengarkan dengan listen().
   Menerima koneksi masuk menggunakan accept() (ini akan menciptakan objek socket baru untuk berkomunikasi dengan klien).
   Mengirim dan menerima data dengan klien menggunakan socket baru.
   Alur Kerja Socket untuk Sisi Klien:

   Membuat objek socket menggunakan socket.socket().
   Menghubungkan ke alamat dan port server menggunakan connect().
   Mengirim dan menerima data dengan server menggunakan socket.

   ** urllib
   In this example, urllib.request is used to make an HTTP GET request to the URL 'https://www.example.com'. The response is then read and stored in html_content, which contains the HTML content of the web page.

   Dalam Python, urllib adalah modul yang menyediakan serangkaian fungsi untuk bekerja dengan URL (Uniform Resource Locators). Modul ini digunakan untuk berbagai tugas terkait pengambilan data dari web, melakukan permintaan HTTP, dan berinteraksi dengan sumber daya web.

   Modul urllib merupakan bagian dari Pustaka Standar Python, sehingga sudah terpasang bersama Python, dan Anda tidak perlu menginstal pustaka eksternal apa pun untuk menggunakannya.

   Modul urllib berisi beberapa submodul, seperti urllib.request, urllib.parse, urllib.error, urllib.robotparser, dan urllib.response. Submodul-submodul ini menawarkan berbagai fungsi untuk menangani berbagai aspek dalam bekerja dengan URL dan sumber daya web.

   Beberapa contoh penggunaan umum dari urllib termasuk mengambil halaman web, mengunduh file, melakukan permintaan HTTP GET dan POST, memparsing URL, serta menangani kesalahan terkait pengambilan URL.
** 22. Web Service in python
   ** XML Schema
   "XML Schema, juga dikenal sebagai Definisi Skema XML (XSD), adalah cara untuk mendefinisikan struktur, konten, dan tipe data dari dokumen XML. Ini menyediakan kumpulan aturan dan batasan yang harus dipenuhi oleh dokumen XML agar dianggap sah sesuai dengan skema. XML Schema ditulis dalam format XML itu sendiri dan berfungsi sebagai cetak biru atau kontrak untuk memvalidasi data XML.
   Schema biasanya digunakan untuk :
   ** validasi
   ** Dokumentasi
   ** pemetaan data

   contoh :
   <!-- Contoh XML Schema untuk mendefinisikan sebuah buku -->
   <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

   <xs:element name="buku">
      <xs:complexType>
         <xs:sequence>
         <xs:element name="judul" type="xs:string"/>
         <xs:element name="penulis" type="xs:string"/>
         <xs:element name="tahun" type="xs:int"/>
         </xs:sequence>
      </xs:complexType>
   </xs:element>

   </xs:schema>

   Pada contoh ini:

   Kami mendefinisikan sebuah XML Schema dengan namespace target (xmlns:xs="http://www.w3.org/2001/XMLSchema").

   Kami mendefinisikan elemen bernama buku, yang berisi tiga elemen anak: judul, penulis, dan tahun.

   Setiap elemen anak memiliki tipe data yang ditentukan: judul dan penulis berjenis xs:string (string), dan tahun berjenis xs:int (integer).

   Dengan XML Schema ini, sebuah dokumen XML harus mengikuti struktur dan tipe data yang telah ditentukan untuk dianggap sah. Misalnya:

   <buku>
    <judul>Judul Contoh</judul>
    <penulis>John Doe</penulis>
    <tahun>2023</tahun>
   </buku>

   biasanya pembuatan contract Shema dan File XML Schema di buat terpisah, dan nanti nya akan di hubungkan dengan import atau include.

23. JSON di Python
   ** JSON (JavaScript Object Notation) adalah format pertukaran data yang ringan dan mudah dibaca oleh manusia, serta mudah diproses dan dihasilkan oleh mesin. Di dalam bahasa Python, terdapat modul json yang menyediakan dukungan bawaan untuk bekerja dengan data JSON. Modul ini menawarkan berbagai fungsi untuk mengkodekan (serialize) objek-objek Python menjadi format JSON, serta mendekodekan (deserialize) string JSON kembali menjadi objek-objek Python.

   Berikut adalah beberapa fungsi umum yang disediakan oleh modul json:

   1. json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw): Fungsi ini mengkodekan objek-objek Python (seperti dictionary atau list) menjadi string dengan format JSON.

   2. json.loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw): Fungsi ini mendekodekan string JSON kembali menjadi objek-objek Python.

   3. json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw): Fungsi ini menulis objek-objek Python ke dalam sebuah file dengan format JSON.

   4. json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw): Fungsi ini membaca data JSON dari sebuah file dan mengubahnya menjadi objek-objek Python.

24. Service Oriented Approach (Pendekatan berbasis layanan)
    adalah paradigma dalam pengembangan perangkat lunak yang fokus pada penggunaan layanan sebagai blok bangunan dasar. Dalam konteks ini, layanan mengacu pada unit fungsional yang independen, yang dapat berkomunikasi dengan sistem lain
   Karakteristik kunci dari pendekatan berorientasi layanan (Service-Oriented Approach) adalah:
   ** 1. Layanan Independen: Setiap layanan dalam arsitektur ini berfungsi secara independen, artinya mereka berjalan   dalam konteks terpisah satu sama lain.

   ** 2. Antarmuka Terdefinisi: Setiap layanan menawarkan antarmuka yang terdefinisi dengan jelas, biasanya dalam bentuk API (Application Programming Interface). Antarmuka ini menyediakan cara bagi layanan lain untuk berkomunikasi dan berinteraksi dengan layanan tersebut.

   ** 3. Pembagian Fungsionalitas: Pendekatan berorientasi layanan membagi fungsionalitas sistem menjadi sejumlah layanan independen. Ini memungkinkan pengembang untuk fokus pada pembangunan dan pemeliharaan setiap layanan secara terpisah, 

   ** 4. Penggunaan Ulang (Reusable)

   ** 5. Interoperabilitas: Layanan dalam pendekatan berorientasi layanan harus dapat berkomunikasi dengan sistem lain yang mungkin dibangun dengan teknologi atau bahasa pemrograman yang berbeda.

   ** 6. Skalabilitas: Dalam arsitektur berorientasi layanan, Anda dapat dengan mudah meningkatkan kapasitas sistem dengan menambah atau mengurangi instance dari layanan tertentu, sehingga mendukung skalabilitas secara lebih fleksibel.

25. Object Oriented Approach
   di python ada yang namanya OOP python terdiri dari:
   ** Class , adalah blueprint atau cetak biru dari suatu object (cetakan)
   ** Method/Fungsi, adalah fungsi yang ada didalam Class
   ** Atribut, yaitu variabel yang di definisikan didalam Class

   OOP python mempunyai sifat Inheritance(turunan), yaitu child class dapat memakai method atau atribut dari parent class nya. Konsep Inheritance atau pewarisan sama seperti apa yang di wariskan orang tua kepada anaknya.
   ** biasanya jika file nya terpisah dapat menggunakan sintak "from file parent import nama class parent"
